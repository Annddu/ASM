     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 1900                        a dw 25;65000
    14 00000002 05                          b db 5;250
    15 00000003 32000000                    e dd 50;4294967000
    16 00000007 6400000000000000            x dq 100;6744073709551000
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; x-b+8+(2*a-b)/(b*b)+e; a-word; b-byte; e-doubleword; x-qword
    22                                          ; Unsigned reprezentation
    23 00000000 A0[02000000]                    mov AL, byte[b]
    24 00000005 6698                            CBW
    25 00000007 98                              CWDE
    26 00000008 89C3                            mov EBX, EAX
    27 0000000A A1[07000000]                    mov EAX, dword[x+0]
    28 0000000F 8B15[0B000000]                  mov EDX, dword[x+4]
    29 00000015 29D8                            sub EAX, EBX
    30 00000017 83DA00                          sbb EDX, 0
    31 0000001A 83C008                          add EAX, 8
    32 0000001D 83D200                          adc EDX, 0; edx:eax=x-b+8
    33                                          
    34 00000020 52                              push EDX
    35 00000021 50                              push EAX
    36                                          
    37 00000022 66A1[00000000]                  mov AX, word[a]
    38 00000028 B302                            mov BL, 2
    39 0000002A F6EB                            imul BL; dx:ax = 2*a
    40                                          
    41 0000002C 6689C3                          mov BX,AX; dx:bx = 2*a
    42                                          
    43 0000002F A0[02000000]                    mov AL, byte[b]
    44 00000034 6698                            CBW;  ax = b
    45 00000036 6629C3                          sub BX, AX 
    46 00000039 6683DA00                        sbb DX, 0; dx:bx = 2*a-b
    47                                          
    48 0000003D A0[02000000]                    mov AL, byte[b]
    49 00000042 F62D[02000000]                  imul byte[b]; ax=b*b
    50                                          
    51 00000048 6689C1                          mov CX, AX
    52 0000004B 6689D8                          mov AX, BX
    53 0000004E 6689CB                          mov BX, CX; dx:ax = 2*a-b bx=b*b
    54                                          
    55 00000051 66F7FB                          idiv BX; ax=(2*a-b)/(b*b) dx=(2*a-b)%(b*b)
    56                                          
    57 00000054 5B                              pop EBX
    58 00000055 5A                              pop EDX; edx:ebx=x-b+8
    59                                  
    60 00000056 98                              CWDE; eax=(2*a-b)/(b*b)
    61 00000057 89C1                            mov ECX, EAX
    62 00000059 89D8                            mov EAX, EBX
    63 0000005B 89CB                            mov EBX, ECX; edx:eax=x-b+8 ebx=(2*a-b)/(b*b)
    64 0000005D 01D8                            add EAX, EBX
    65 0000005F 83D200                          adc EDX, 0; edx:eax=x-b+8+(2*a-b)/(b*b)
    66                                          
    67 00000062 0305[03000000]                  add EAX, dword[e]
    68 00000068 83D200                          adc EDX, 0; edx:eax=x-b+8+(2*a-b)/(b*b)+e
    69                                          
    70                                          ; exit(0)
    71 0000006B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    72 0000006D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
