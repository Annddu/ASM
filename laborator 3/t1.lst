     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 64                          a db 100
    14 00000001 3075                        b dw 30000
    15 00000003 00943577                    c dd 2000000000
    16 00000007 0080E03779C31100            d dq 5000000000000000
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; (a + c) - b + a + (d - c)
    22                                          ; a - byte, b - word, c - double word, d - qword - Unsigned representation
    23                                          
    24 00000000 A0[00000000]                    mov AL, [a]
    25 00000005 B400                            mov AH, 0
    26 00000007 66BA0000                        mov DX, 0 ;            DX:AX = a
    27                                          
    28 0000000B 660305[03000000]                add AX, [c]
    29 00000012 661315[05000000]                adc DX, [c+2] ;        DX:AX = a + c
    30                                          
    31 00000019 662B05[01000000]                sub AX, word[b]
    32 00000020 6683DA00                        sbb DX, 0
    33 00000024 0205[00000000]                  add AL, byte[a] 
    34 0000002A 80D400                          adc AH, 0 ;            DX:AX = (a + c) - b + a
    35 0000002D 6652                            push DX
    36 0000002F 6650                            push AX
    37 00000031 58                              pop EAX ;              EAX = (a + c) - b + a
    38                                          
    39 00000032 8B1D[07000000]                  mov EBX, dword [d+0]
    40 00000038 8B0D[0B000000]                  mov ECX, dword [d+4] ; ECX:EBX = d
    41 0000003E 2B1D[03000000]                  sub EBX, dword [c] 
    42 00000044 83D900                          sbb ECX, 0 ;           ECX:EBX = d - c
    43                                          
    44 00000047 89CA                            mov EDX, ECX
    45 00000049 01D8                            add EAX, EBX
    46 0000004B 83D200                          adc EDX, 0 ;           EDX:EAX = (a + c) - b + a + (d - c)
    47                                          
    48                                          
    49                                          ; exit(0)
    50 0000004E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 00000050 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
