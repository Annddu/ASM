     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0A                          a db 10
    14 00000001 3075                        b dw 30000
    15 00000003 00943577                    c dd 2000000000
    16 00000007 00203D88792D0000            d dq 50000000000000
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; a-b-(c-d)+d
    22                                          ; a - byte, b - word, c - double word, d - qword - Signed representation
    23                                          
    24 00000000 F8                              clc
    25 00000001 A0[00000000]                    mov AL, byte[a]
    26 00000006 6698                            CBW ; AX = a
    27 00000008 662B05[01000000]                sub AX, word [b]
    28 0000000F 66BA0000                        mov DX, 0
    29 00000013 6683DA00                        sbb DX, 0 ; DX:AX = a - b
    30                                          
    31 00000017 6652                            push DX
    32 00000019 6650                            push AX
    33 0000001B 58                              pop EAX ; EAX = a - b
    34 0000001C 99                              CDQ ; EDX:EAX = a - b
    35 0000001D 89C3                            mov EBX, EAX
    36 0000001F 89D1                            mov ECX, EDX ; ECX:EBX = a - b
    37                                          
    38 00000021 F8                              clc
    39 00000022 A1[03000000]                    mov EAX, dword[c]
    40 00000027 99                              CDQ ; EDX:EAX = c
    41 00000028 2B05[07000000]                  sub EAX, dword[d+0]
    42 0000002E 1B15[0B000000]                  sbb EDX, dword[d+4] ; EDX:EAX = c-d
    43                                          
    44 00000034 F8                              clc
    45 00000035 29C3                            sub EBX, EAX
    46 00000037 19D1                            sbb ECX, EDX ; ECX:EBX = a - b-(c-d)
    47 00000039 F8                              clc
    48 0000003A 031D[07000000]                  add EBX, dword[d+0]
    49 00000040 130D[0B000000]                  adc ECX, dword[d+4]
    50                                          
    51 00000046 89D8                            mov EAX, EBX
    52 00000048 89CA                            mov EDX, ECX
    53                                          
    54                                      
    55                                          ; exit(0)
    56 0000004A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    57 0000004C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
